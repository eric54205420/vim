#Vim使用技巧
1. Vim解決問題的方式
1. .命令

    x: 刪除光標下的字符
    .: 重複上次修改
    u: 撤銷上此次修改
    dd: 刪除當前行
    >G: 增加本行至末尾行的行間距

2. 不要自我重複

    $移至行尾
    ^: 移至行頭
    A: 切換到插入模式並到行尾,等於a$

3. 以退為進

    f字符: 移至下個匹配的字符,接著按;搜索下次出現的字符
    s=cl: 刪除當前字符並進入插入模式

4. 執行、重複、回退
目的 	操作 	重複 	回退
做出一個修改 	{etid} 	. 	u
在行內查找下一指定字符 	f{char}/t{char} 	; 	,
在行內查找上一指定字符 	F{char}/T{char} 	; 	,
在文檔中查找下一匹配項 	/pattern 	n 	N
在文檔中查找上一匹配項 	?pattern 	n 	N
執行替換 	:s/target/replacement 	& 	u
執行一系列修改 	qx{changes}q 	&x 	u
5. 查找並手動替換

    *: 移至要搜索的單詞,按*,查找所以一樣的單詞,若沒看到高亮,請:sethls瞭解
    cw: 刪除光標位置到行尾的字符

6. 結識.範式

    理想模式: 用一鍵移動,另一鍵執行

2. 普通模式
1. 停頓時請移開畫筆

程序猿其實很少在敲代碼,大多在思考
2. 把撤銷單元切成塊

每一個可撤銷快對應一次修改過程,修改完一次代碼,切換回普通模式
3. 構造可重複的修改

    daw: delete a word,

4. 用次數做簡單的算術運算

    yyp複製當前行
    <ctrl+a>執行數字遞增
    <ctrl+x>執行遞減,光標不在數字時,會自動查找並操作下一個數字
    默認0開頭數字為八進制,改變此行為的方法set nrformats=

5. 能夠重複,就別用次數

執行->重複->回退
6. 雙劍合璧,天下無敵
命令 	用途
c 	修改
d 	刪除
y 	複製到寄存器
g~ 	反轉大小寫
gu 	轉換為小寫
gU 	轉換為大寫
> 	增加縮進
< 	減小縮進
= 	自動縮進
! 	使用外部程序過濾(motion)所跨越的行
3.插入模式
1.在插入模式中可即使更正錯誤

    <C+w>: 刪除前一個單詞
    <C-u>: 刪除至行首

2. 返回普通模式

    <C-o>: 切換到插入-普通模式,執行完一次命令後,自動切換到插入模式
    zz: 光標所在行,放到屏幕中央

3. 不離開插入模式,粘貼寄存器中的文本

    yt,: 複製當前字符直到,
    <C-r>0: 把寄存器中第0次複製的取出來

4. 隨時隨地的做運算

    <C-R>=6*35<CR>: 會把結果插入到當前光標所在處

5. 用字符編碼插入非常用字符

    <C-v>0xx: 假如a:065
    <C-v>u{xxxx}

5. 用二合字母插入非常用字符

查詢二合字母表: h digraphs-default/:h digraph-table
6. 用替換模式已有文本

    R: 從普通->替換模式,替換和插入模式,只是一個會替換..一個會插入
    gR: 觸發虛擬替換模式,假如製表符tabstop為8,那麼前7個會當字符處理,第插入第8個字符時,該字符會替換製表符
    r{char},gr{char}: 支持覆蓋一個字符,立馬回到普通模式

4.可視模式

    可視模式分為操作字符文本、行文本或塊文本

1. 深入理解可視模式

    <C-g>: 可視模式<->選擇模式

2. 選擇高亮選區

    v: 激活面向字符的可視模式
    V: 激活面向行的可視模式
    : 激活面向列快的可視模式
    gv: 重選上次的高亮選區
    o: 切換高亮選區的活動端

3.重複執行面向行的可視命令

    :set shiftwidth=4 softtabstop=4 expandtab: 設置縮進為4

4. 只要可能,最好用操作符命令,而不是可視命令

    vit: 選中標籤內容
    U:大寫

5. 用面向列塊的可視模式編輯表格數據

    C-v: 進入列選擇模式
    yyp: 複製並粘貼本行

6. 修改列文本

    ESC: 能複製選擇列中做的相應改變,

7. 在長短不一的高亮塊後添加文本
5. 命令模式
3. 使用:t和:m複製和移動行

    :6t.: 把當前行複製到當前行下方
    :t$: 把當前行複製到文本結尾
    ``
